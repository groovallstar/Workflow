# syntax=docker/dockerfile:1
FROM python:3.11.6-bullseye

SHELL ["/bin/bash", "-c"]
RUN echo "alias ll='ls $LS_OPTIONS -alh'" >> ~/.bashrc && source ~/.bashrc

RUN <<EOF
# Add Docker's official GPG key:
apt-get update
apt-get install -y ca-certificates curl
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc
# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  tee /etc/apt/sources.list.d/docker.list > /dev/null
# docker 설치
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io \
                   docker-buildx-plugin docker-compose-plugin

# apt-get package
apt-get install -y openssh-server liblzma-dev libbz2-dev logrotate \
                   cron git-lfs tzdata vim

# timezone
export DEBIAN_FRONTEND=noninteractive
ln -fs /usr/share/zoneinfo/Asia/Seoul /etc/localtime
dpkg-reconfigure --frontend noninteractive tzdata
EOF

# set environments.
COPY .env .
RUN <<EOF
source .env
echo "export PYTHONPATH=${PYTHONPATH}" >> ~/.profile
echo "export MONGODB_URL=${MONGODB_URL}" >> ~/.profile
echo "export MLFLOW_URL=${MLFLOW_URL}" >> ~/.profile
echo "export REDIS_HOST_IP=${REDIS_HOST_IP}" >> ~/.profile
echo "export CELERY_BROKER_URL=${CELERY_BROKER_URL}" >> ~/.profile
echo "export CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}" >> ~/.profile
echo "export C_FORCE_ROOT=${C_FORCE_ROOT}" >> ~/.profile
echo "export LC_ALL=${LC_ALL}" >> ~/.profile
echo "export LANG=${LANG}" >> ~/.profile
source ~/.profile
EOF

# pip install list
COPY ./client/requirements.txt .
RUN <<EOF
python -m pip install --upgrade pip
pip install -r requirements.txt
EOF

# ssh 설정
RUN <<EOF
mkdir /root/.ssh
# set password
echo 'root:root'|chpasswd

# replace sshd_config
sed -ri 's/^#?PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config
service ssh start
EOF
